openapi: '3.0.0'
info:
  title: API Documentation
  description: API Documentation
  version: 0.0.0

servers:
  - url: 'https://hosts.uhc.gg/api'
    description: 'Live server'
  - url: 'http://localhost:10000/api'
    description: 'Development server'

components:
  securitySchemes:
    UserApiToken:
      type: http
      description: "User-specific tokens that can be generated and regenerated via the website"
      scheme: basic
    SiteApiToken:
      type: http
      description: "Tokens meant specifically for the website but can be used outside if you want to handle short-lived tokens"
      scheme: bearer
      bearerFormat: JWT
  responses:
    BadRequest:
      description: Bad/malformed data supplied or data did not pass validation. Response body should contain a reason why the request was rejected
    UnauthorizedError:
      description: API key is missing or invalid
    ForbiddenError:
      description: You don't have permission to use this endpoint
  schemas:
    SyncResponse:
      type: string
      example: '2017-08-10T09:11:22.031Z'
    VersionResponse:
      type: object
      properties:
        id:
          type: integer
          description: 'The unique ID of this version'
        displayName:
          type: string
          description: The version to display in the UI
        weight:
          type: integer
          description: Used to sort elements in the UI
      example:
        id: 10
        displayName: 1.8
        weight: 2
    SetRulesRequest:
      type: string
      example: Some *markdown* rules
    RulesResponse:
      type: object
      properties:
        id:
          type: integer
          description: 'The revision # of the rules'
        author:
          type: string
          description: The name of the user that created this revision
        modified:
          type: string
          description: The date that this revision was created
        content:
          type: string
          description: Markdown version of the rules
      example:
        id: 10
        author: test
        modified: '2017-08-07T10:22:11.145415Z'
        content: '#RULES HERE'
    MatchResponse:
      type: object
      required:
        - id
        - author
        - opens
        - ip
        - scenarios
        - tags
        - teams
        - count
        - content
        - region
        - removed
        - created
        - roles
        - location
        - mainVersion
        - version
        - slots
        - length
        - mapSize
        - pvpEnabledAt
        - tournament
      properties:
        id:
          type: integer
          description: The unique ID of this match
        author:
          type: string
          description: The username of the creator/host
        opens:
          type: string
          description: The time that this match opens
        address:
          type: string
          description: Domain name to join (optional)
        ip:
          type: string
          description: IP + (optional) port combo for direct connect to the server
        scenarios:
          type: array
          description: A list of scenarios that will be hosted
          items:
            type: string
        tags:
          type: array
          description: A list of 'tags'
          items:
            type: string
        teams:
          type: string
          description: The team style ID
          enum:
            - ffa
            - chosen
            - random
            - captains
            - picked
            - market
            - mystery
            - rvb
            - custom
        size:
          type: number
          description: The team size (optional), not all teams require a size, this field
            will be null for those
        customStyle:
          type: string
          description: Will only be defined if `teams` === 'custom'
        count:
          type: number
          description: The match count of the host
        content:
          type: string
          description: Markdown content of the match post
        region:
          type: string
          enum:
            - NA
            - SA
            - AS
            - EU
            - AF
            - OC
        removed:
          type: boolean
          description: Whether a hosting advisor has removed this match or not
        removedBy:
          type: string
          description: Only defined if `removed` is true. The username of the account that
            did the removal
        removedReason:
          type: string
          description: Only defined if `removed` is true. The reason that `removedBy` removed
            the match
        created:
          type: string
          description: The date that the match was posted
        roles:
          type: array
          description: A list of roles that the host has
          items:
            type: string
        location:
          type: string
          description: The free-text location of the server
        mainVersion:
          type: string
          description: The servers 'main' version, options can be found via the /versions/primary endpoint
        version:
          type: string
          description: The version/range of versions of Minecraft the server accepts
        slots:
          type: number
          description: How many slots are available on the server
        length:
          type: number
          description: How long the match is in minutes
        mapSize:
          type: number
          description: How big is the map (diameter)
        pvpEnabledAt:
          type: boolean
          description: How long into the match will PVP be enabled (in minutes)
        approvedBy:
          type: string
          description: If defined, the username that approved the match
        hostingName:
          type: string
          description: If defined, should override the users Reddit username for the match
        tournament:
          type: boolean
          description: Whether the game is a tournament or not, tournaments bypass overhosting rules
        originalEditId:
          type: number
          description: The original match ID in this chain of edits, if not set then this is an original match
        latestEditId:
          type: number
          description: The ID of the latest edit of this match, if not set this is the latest edit
      example:
        id: 3
        author: ghowden
        opens: '2017-08-28T15:15:00Z'
        address: example.com
        ip: '255.0.0.255:5000'
        scenarios:
          - Vanilla+
        tags:
          - TEST
        teams: chosen
        size: 3
        customStyle: null
        count: 10
        content: test content
        region: NA
        removed: true
        removedBy: ghowden
        removedReason: test removal
        created: '2017-08-09T13:29:43.966Z'
        roles:
          - hosting advisor
          - trial host
        location: test
        mainVersion: "1.8"
        version: "1.8 - 1.9"
        slots: 80
        length: 90
        mapSize: 1500
        pvpEnabledAt: 20
        approvedBy: everyone
        hostingName: Name Override
        tournament: false
        originalEditId: 67552
        latestEditId: 67554
    CreateMatchRequest:
      type: object
      required:
        - opens
        - ip
        - scenarios
        - tags
        - teams
        - count
        - content
        - region
        - location
        - mainVersion
        - version
        - slots
        - length
        - mapSize
        - pvpEnabledAt
        - tournament
      properties:
        opens:
          type: string
          description: The time that this match will open
        address:
          type: string
          description: Domain name to join (optional)
        ip:
          type: string
          description: IP + (optional) port combo for direct connect to the server
        scenarios:
          type: array
          description: A list of scenarios that will be hosted
          items:
            type: string
        tags:
          type: array
          description: A list of 'tags'
          items:
            type: string
        teams:
          type: string
          description: The team style ID
          enum:
            - ffa
            - chosen
            - random
            - captains
            - picked
            - market
            - mystery
            - rvb
            - custom
        size:
          type: number
          description: The team size (optional), not all teams require a size, this field will be null for those
        customStyle:
          type: string
          description: Will only need to be defined if `teams` === 'custom'
        count:
          type: number
          description: The match count of the host
        content:
          type: string
          description: Markdown content of the match post
        region:
          type: string
          enum:
            - NA
            - SA
            - AS
            - EU
            - AF
            - OC
        location:
          type: string
          description: The free-text location of the server
        mainVersion:
          type: string
          description: The servers 'main' version, options can be found via the /versions/primary endpoint
        version:
          type: string
          description: The version/range of versions of Minecraft the server accepts
        slots:
          type: number
          description: How many slots are available on the server
        length:
          type: number
          description: How long the match is in minutes
        mapSize:
          type: number
          description: How big is the map (diameter)
        pvpEnabledAt:
          type: boolean
          description: How long into the match will PVP be enabled (in minutes)
        hostingName:
          type: string
          description: If defined, should override the users Reddit username for the match
        tournament:
          type: boolean
          description: Whether the game is a tournament or not, tournaments bypass overhosting rules
        originalEditId:
          type: number
          description: When this is not set this will post as an original match. When this is set then any other edits
          from this chain of edits will be removed and the new match will be added linked to the original. When the ID
          provided is not an original match then the original ID will be looked up and used instead
      example:
        opens: '2017-08-28T15:15:00Z'
        address: example.com
        ip: '255.0.0.255:5000'
        scenarios:
          - Vanilla+
        tags:
          - TEST
        teams: chosen
        size: 3
        customStyle: null
        count: 10
        content: test content
        region: NA
        location: test
        mainVersion: "1.8"
        version: "1.8 - 1.9"
        slots: 80
        length: 90
        mapSize: 1500
        pvpEnabledAt: 20
        hostingName: Name Override
        tournament: false
    UblEntryResponse:
      type: object
      example:
        id: 10
        ign: test
        uuid: 00000000-0000-0000-0000-000000000000
        reason: reasoning
        created: '2017-08-10T09:11:22.031Z'
        expires: '2018-08-10T09:11:22.031Z'
        link: 'https://redd.it/aaaaa'
        createdBy: ghowden
      required:
        - id
        - ign
        - uuid
        - reason
        - created
        - link
        - createdBy
      properties:
        id:
          type: integer
          description: 'The unique ID of this entry'
        ign:
          type: string
          description: 'The in game name of the banned account (at time of ban)'
        uuid:
          type: string
          description: 'The in game UUID of the banned account'
        reason:
          type: string
          description: 'The reason this ban was added'
        created:
          type: string
          description: 'When the ban started'
        expires:
          type: string
          description: 'When the ban ends'
        link:
          type: string
          description: 'The courtroom post for the ban'
        createdBy:
          type: string
          description: Username of the account that created the ban
    CreateUblEntryRequest:
      type: object
      required:
        - ign
        - uuid
        - reason
        - link
      example:
        ign: test
        uuid: 00000000-0000-0000-0000-000000000000
        reason: test
        expires: '2017-08-10T09:11:22.031Z'
        link: https://redd.it/test
      properties:
        ign:
          type: string
          description: 'The in game name of the banned account (at time of ban)'
        uuid:
          type: string
          description: 'The in game UUID of the banned account'
        reason:
          type: string
          description: 'The reason this ban was added'
        expires:
          type: string
          description: 'When the ban ends, if not provided then infinite'
        link:
          type: string
          description: 'The courtroom post for the ban'
    AlertResponse:
      type: object
      required:
        - id
        - field
        - alertOn
        - exact
        - createdBy
        - created
      properties:
        id:
          type: integer
          description: The unique ID of this alert
        field:
          type: string
          description: The field to check, must be one of 'ip' | 'address' | 'hosting name' | 'content' | 'tags'. 'tags' checks each tag individually
        alertOn:
          type: string
          description: Value to search for
        exact:
          type: boolean
          description: Whether to alert on exact match or not. If true the entire field must match, if false the field only has to contain the alertOn value
        createdBy:
          type: string
          description: Username of whoever created the alert
        created:
          type: string
          description: The date + time the alert was created
      example:
        id: 11
        field: tags
        alertOn: exact tag
        exact: true
        createdBy: ghowden
        created: "2017-09-29T11:33:07.039Z"
    ModifierResponse:
      type: object
      required:
        - id
        - displayName
      properties:
        id:
          type: integer
          description: Unique ID for this modifier
        displayName:
          type: string
          description: The name that should be shown for this modifier
      example:
        id: 100
        displayName: CutClean

paths:
  /sync:
    get:
      tags:
        - Misc
      summary: Returns the server time (UTC)
      description: Used by calendar to show correct UTC times independent of the users PC
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncResponse'
  /rules:
    get:
      tags:
        - Rules
      summary: Returns the hosting rules
      description: Shows the latest revision of the hosting rules, older versions are
        stored by the server but are unfetchable currently
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesResponse'
    post:
      tags:
        - Rules
      security:
        - UserApiToken: []
        - SiteApiToken: []
      summary: Update the hosting rules
      description: Overwrites the hosting rules with new content, requires authentication
        with `hosting advisor` permission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetRulesRequest'
      responses:
        '201':
          description: Rules updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /matches/upcoming:
    get:
      tags:
        - Matches
      summary: Returns a list of upcoming matches
      description: Show matches that open after 30 minutes ago. Does not filter out removed
        matches but will filter out any matches that were removed because they were edited
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchResponse'
  /matches:
    post:
      tags:
        - Matches
      security:
        - UserApiToken: []
        - SiteApiToken: []
      summary: Posts a new match
      description: Attempts to post a new match or edit an existing match. Requires either `trial host` or `host` permission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMatchRequest'
      responses:
        '201':
          description: Created, returns the stored data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  '/matches/{id}':
    get:
      tags:
        - Matches
      summary: Get a specific match
      description: Fetches data from a specific match, even if it opened a long time ago
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the match to get
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
        '404':
          description: Could not find a match with the given ID
    delete:
      tags:
        - Matches
      security:
        - UserApiToken: []
        - SiteApiToken: []
      summary: Remove a match
      description: Removes a match, requires the `hosting advisor` permission, cannot be reversed
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the match to remove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reason
              properties:
                reason:
                  type: string
                  description: A short description on why you want to remove this match
                  minLength: 3
                  maxLength: 255
              example:
                reason: Server exploded, can't host
      responses:
        '204':
          description: Match removed
        '404':
          description: Could not find a match with the given ID
  '/matches/{id}/edits':
    get:
      tags:
        - Matches
      summary: Shows all edits for the given match
      description: Fetches data for all edits of the given match, both past and future edits from this one
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the match to get
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchResponse'
        '404':
          description: Could not find a match with the given ID
  '/matches/{id}/approve':
    post:
      tags:
        - Matches
      security:
        - UserApiToken: []
        - SiteApiToken: []
      summary: Approve a match
      description: Approves a match, requires `hosting advisor` permission
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the match to get
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Could not find a match with the given ID
  '/matches/conflicts':
    get:
      tags:
        - Matches
      summary: Check for potential conflicts
      description: Shows matches +-15 minutes of the given time and region
      parameters:
        - in: query
          name: region
          required: true
          description: The region to check in
          schema:
            type: string
            enum:
              - NA
              - SA
              - AS
              - EU
              - AF
              - OC
          example: OC
        - in: query
          name: version
          required: true
          description: The main version of the match
          schema:
            type: string
          example: 1.8
        - in: query
          name: opens
          required: true
          description: The time to check around
          schema:
            type: string
          example: '2017-08-07T10:22:11.145415Z'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchResponse'
  /hosts/{host}/matches:
    get:
      tags:
        - Hosts
        - Matches
      summary: List hosted matches
      description: Lists hosted matches for the given host in reverse created order.
      parameters:
        - in: path
          name: host
          schema:
            type: string
          required: true
          description: The username of the host
        - in: query
          name: count
          schema:
            type: integer
          required: false
          default: 20
          description: How many entries to return max
          max: 50
          min: 1
        - in: query
          name: before
          schema:
            type: integer
          required: false
          description: Show matches IDs less than this ID used for pagination of data
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchResponse'
  /permissions:
    get:
      tags:
        - Permissions
      summary: List count for each permission ID
      description: Shows all permissions and how many users have that permission
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: a map of permission name to number of members with that permission
                additionalProperties:
                  type: number
                  description: Number of users with this permission
                example:
                  admin: 5
                  host: 117
                  hosting advisor: 13
                  hosting banned: 3
                  trial host: 808
                  ubl moderator: 1
  /permissions/log:
    get:
      tags:
        - Permissions
      summary: Lists log of permissions changes
      description: Lists a recent history of permissions changes
      parameters:
        - in: query
          name: before
          schema:
            type: integer
          description: If defined only shows items before the given ID
        - in: query
          name: count
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
          description: How many to return
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                example:
                  - id: 10
                    modifier: ghowden
                    username: LeonTG77
                    at: '2017-08-07T10:22:11.145415Z'
                    permission: host
                    added: false
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      required: true
                      description: The unique ID of this log
                    modifier:
                      type: string
                      required: true
                      description: The username of the user that did this action
                    username:
                      type: string
                      required: true
                      description: The username of the user that was modified
                    at:
                      type: string
                      required: true
                      description: The time that the modification occurred
                    permission:
                      type: string
                      required: true
                      description: The name of the role that was added/removed
                    added:
                      type: boolean
                      required: true
                      description: Whether the role was added or removed
  /permissions/{permission}:
    get:
      tags:
        - Permissions
      summary: List users with a permission
      description: Either shows a list of usernames with the given permission OR an object of `first letter of username` -> number of users
      parameters:
        - in: path
          name: permission
          description: The id of the permission to look up
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: a map of `first letter of usernam` to number of members
                additionalProperties:
                  type: number
                example:
                  a: 50
                  h: 11
                  hosting banned: 3
                  t: 8
                  u: 1
  /permissions/{permission}/{letter}:
    get:
      tags:
        - Permissions
      summary: Lists users with the permission that start with the letter
      description: Shows all members of the given permission that start with the given letter
      parameters:
        - in: path
          name: permission
          description: The id of the permission to lookup
        - in: path
          name: letter
          description: The first letter of the username to lookup
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: the username of the member
                example:
                  - aaa
                  - abb
                  - acc
                  - ADD
  /permissions/{permission}/{username}:
    post:
      tags:
        - Permissions
      summary: Adds a permission to a user
      description: Adds the given permission to the given username, requires `admin` permission
      security:
        - SiteApiToken: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: What user to give the role to
        - in: path
          name: permission
          schema:
            type: string
          description: The name of the role to grant
          required: true
      responses:
        '201':
          description: Role added
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    delete:
      tags:
        - Permissions
      summary: Removes a permission from a user
      description: Removes the given permission from the given username, requires admin role
      security:
        - SiteApiToken: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: What user to give the role to
        - in: path
          name: permission
          schema:
            type: string
          description: The name of the role to grant
          required: true
      responses:
        '204':
          description: Role removed
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /ubl/current:
    get:
      tags:
        - UBL
      summary: List all current bans
      description: List all of the bans that are currently being applied, most recently created first
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UblEntryResponse'
  /ubl:
    post:
      tags:
        - UBL
      summary: Create a new ban Entry
      description: Creates a new ban entry, requires `ubl moderator` permission
      security:
        - SiteApiToken: []
        - UserApiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUblEntryRequest'
      responses:
        '201':
          description: Created, returns the stored data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UblEntryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /ubl/{id}:
    delete:
     tags:
       - UBL
     summary: Deletes a ban Entry
     description: Deletes an existing ban entry, requires `ubl moderator` permission
     parameters:
       - in: path
         name: id
         type: number
         required: true
         description: The id of the ban to delete
     security:
       - SiteApiToken: []
       - UserApiToken: []
     responses:
       '204':
         description: Deleted
       '400':
         $ref: '#/components/responses/BadRequest'
       '401':
         $ref: '#/components/responses/UnauthorizedError'
       '403':
         $ref: '#/components/responses/ForbiddenError'
       '404':
         description: Could not find a ban with the given ID
    post:
      tags:
        - UBL
      summary: Edits a ban Entry
      description: Edit an existing ban entry, requires `ubl moderator` permission
      parameters:
        - in: path
          name: id
          type: number
          required: true
          description: The id of the ban to edit
      security:
        - SiteApiToken: []
        - UserApiToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUblEntryRequest'
      responses:
        '200':
          description: Created, returns the stored data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UblEntryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Could not find a ban with the given ID
  /ubl/search/{query}:
    post:
      tags:
        - UBL
      summary: Search for username
      description: Searches for partial username in the UBL and lists UUIDs
      parameters:
        - in: path
          name: query
          type: string
          required: true
          description: The partial username to search for
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                description: Map of username -> uuid mappings
                example:
                  user1:
                    - 00000000-0000-0000-0000-000000000000
                    - 00000000-0000-0000-0000-000000000001
                  user2:
                    - 00000000-0000-0000-0000-000000000002
                additionalProperties:
                  type: array
                  items:
                    type: string
                    description: List of matching UUIDs for the username
  /ubl/{uuid}:
    get:
      tags:
        - UBL
      summary: List bans for UUID
      description: Shows every ban that has been created for the given UUID ordered by created date descending
      parameters:
        - in: path
          name: uuid
          type: string
          required: true
          description: The uuid to lookup
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UblEntryResponse'

  /alerts:
    get:
      tags:
        - Hosting Alerts
      summary: List all alerts
      description: Lists all alerts, requires `hosting advisor` permission
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags:
        - Hosting Alerts
      summary: Create a new alert
      description: Creates a new alert, requires `hosting advisor` permission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - field
                - alertOn
                - exact
              properties:
                field:
                  type: string
                  description: The field to check, must be one of 'ip' | 'address' | 'hosting name' | 'content' | 'tags'. 'tags' checks each tag individually
                alertOn:
                  type: string
                  description: Value to search for
                exact:
                  type: boolean
                  description: Whether to alert on exact match or not. If true the entire field must match, if false the field only has to contain the alertOn value
              example:
                field: tags
                alertOn: exact tag
                exact: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /alerts/{id}:
    delete:
      tags:
        - Hosting Alerts
      summary: Delete an alert
      description: Deletes an alert, requries `hosting advisor` permission
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: The ID to delete
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Could not find an alert with the given ID
  /users/{username}/permissions:
    get:
      tags:
        - Users
        - Permissions
      summary: List all permissions for a given user
      description: Shows all currently granted permissions for given username, will return empty array for unknown users the same as users without any permissions
      parameters:
        - in: path
          name: username
          required: true
          description: username to lookup
      responses:
        '200':
          description: 'Successful query'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - hosting advisor
                  - admin
  /modifiers:
    get:
      tags:
        - Modifiers
      summary: Lists all allowed modifiers for a match
      description: Lists all allowed modifiers for a match, modifiers do not conflict with other matches
      responses:
        '200':
          description: 'Successful query'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModifierResponse'
    post:
      tags:
        - Modifiers
      summary: Create a modifier
      description: Creates a new modifier, display name used must not already exist, requries `hosting advisor` permission
      responses:
        '200':
          description: Modifier created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModifierResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /modifiers/{id}:
    delete:
      tags:
        - Modifiers
      summary: Delete a modifier
      description: Deletes an modifier, requries `hosting advisor` permission
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: The ID to delete
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Could not find an modifier with the given ID
  /versions/primary:
    get:
      tags:
        - Versions
      summary: List all primary versions
      description: Lists all primary versions
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VersionResponse'
